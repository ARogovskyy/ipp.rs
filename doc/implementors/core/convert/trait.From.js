(function() {var implementors = {};
implementors["ipp"] = [{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"ipp/proto/operation/trait.IppOperation.html\" title=\"trait ipp::proto::operation::IppOperation\">IppOperation</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"ipp/proto/request/struct.IppRequestResponse.html\" title=\"struct ipp::proto::request::IppRequestResponse\">IppRequestResponse</a>","synthetic":false,"types":["ipp::proto::request::IppRequestResponse"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt; for <a class=\"enum\" href=\"ipp/proto/parser/enum.IppParseError.html\" title=\"enum ipp::proto::parser::IppParseError\">IppParseError</a>","synthetic":false,"types":["ipp::proto::parser::IppParseError"]},{"text":"impl&lt;R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;R&gt; for <a class=\"struct\" href=\"ipp/proto/reader/struct.IppReader.html\" title=\"struct ipp::proto::reader::IppReader\">IppReader</a>&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: 'static + <a class=\"trait\" href=\"https://docs.rs/futures-io/0.3.5/futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a>,&nbsp;</span>","synthetic":false,"types":["ipp::proto::reader::IppReader"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.1/http/error/struct.Error.html\" title=\"struct http::error::Error\">Error</a>&gt; for <a class=\"enum\" href=\"ipp/client/enum.IppError.html\" title=\"enum ipp::client::IppError\">IppError</a>","synthetic":false,"types":["ipp::client::IppError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Error&gt; for <a class=\"enum\" href=\"ipp/client/enum.IppError.html\" title=\"enum ipp::client::IppError\">IppError</a>","synthetic":false,"types":["ipp::client::IppError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt; for <a class=\"enum\" href=\"ipp/client/enum.IppError.html\" title=\"enum ipp::client::IppError\">IppError</a>","synthetic":false,"types":["ipp::client::IppError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"ipp/proto/parser/enum.IppParseError.html\" title=\"enum ipp::proto::parser::IppParseError\">IppParseError</a>&gt; for <a class=\"enum\" href=\"ipp/client/enum.IppError.html\" title=\"enum ipp::client::IppError\">IppError</a>","synthetic":false,"types":["ipp::client::IppError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.1/http/uri/struct.InvalidUri.html\" title=\"struct http::uri::InvalidUri\">InvalidUri</a>&gt; for <a class=\"enum\" href=\"ipp/client/enum.IppError.html\" title=\"enum ipp::client::IppError\">IppError</a>","synthetic":false,"types":["ipp::client::IppError"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()