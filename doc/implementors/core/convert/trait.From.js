(function() {var implementors = {};
implementors["ipp"] = [{"text":"impl From&lt;Error&gt; for IppError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for IppError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for IppError","synthetic":false,"types":[]},{"text":"impl From&lt;IppParseError&gt; for IppError","synthetic":false,"types":[]},{"text":"impl From&lt;InvalidUri&gt; for IppError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;IppOperation&gt; From&lt;T&gt; for IppRequestResponse","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for IppParseError","synthetic":false,"types":[]},{"text":"impl&lt;R&gt; From&lt;R&gt; for AsyncIppReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: 'static + AsyncRead + Send + Sync + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R&gt; From&lt;R&gt; for IppReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: 'static + Read + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()